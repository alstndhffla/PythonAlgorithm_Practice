# prime_number.py 업그레이드 모드.
# 기존 소수 구하는 모델은 n 이 바뀔 때마다 계속 반복적으로 똑같은 수를 하나씩 증가하며
# 나눠줘야 했다.
# 소수로 판단할 수가 커질수록 반복적으로 나눠지는 구간 또한 계속 커지는 것.

counter = 0                 # 나눗셈 횟수 카운트
ptr = 0                     # 찾은 소수의 개수
prime = [None] * 500        # 소수를 저장하는 배열

prime[ptr] = 2              # 2는 소수이므로 초깃값으로 지정
ptr += 1        # 0이었다가 1로 전환. 2가 이미 인덱스 0 자리에 들어가 있기 때문.

for n in range(3, 1001, 2):     # 3부터 홀수만을 대상(4이상의 짝수는 2로 나누어 떨어지므로 소수가 아니기 때문)
    for i in range(1, ptr):     # 이미 찾은 소수로 나눔(1이상 ptr-1 번 반복)
        counter += 1            # 소수를 계산한 횟수 카운트
        if n % prime[i] == 0:   # n 이 소수인지 아닌지 검토당할 숫자(나누어 떨어지면 나머지가 0이므로 break 로 멈춘다)
            break

    else:
        # 소수로 배열 등록
        prime[ptr] = n
        # 등록했으니까 갯수 카운트
        ptr += 1


for i in range(ptr):
    print(prime[i])
print(f'나눗셈을 실행한 횟수: {counter}')

